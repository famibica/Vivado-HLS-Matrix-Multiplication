-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    biggestValue : OUT STD_LOGIC_VECTOR (7 downto 0);
    biggestValue_ap_vld : OUT STD_LOGIC;
    lowestValue : OUT STD_LOGIC_VECTOR (7 downto 0);
    lowestValue_ap_vld : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc6slx16csg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.110000,HLS_SYN_LAT=10,HLS_SYN_TPT=6,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=376,HLS_SYN_LUT=187}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_pp0_stg5_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg5_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal a_load_reg_569 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_1_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_1_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal a_load_2_reg_617 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_2_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_3_reg_631 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_3_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_0_1_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_4_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_5_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_4_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_5_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_0_2_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_1_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_6_reg_723 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_7_reg_730 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_reg_737 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_1_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_6_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_7_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_1_1_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_1_2_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_8_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_0_1_reg_778 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_0_2_reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_1_1_reg_788 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_8_reg_793 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_2_reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_2_1_reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_1_2_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_2_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_2_1_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_2_2_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_2_2_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_0_1_reg_840 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_0_2_reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_2_0_2_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_2_0_2_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_1_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_1_1_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_462_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_1_2_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_2_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_2_1_reg_875 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_2_2_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal tmp_6_2_2_2_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_0_0_2_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_0_1_2_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_1_1_2_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_1_2_2_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_2_1_2_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_1_0_2_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_0_2_2_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_334_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal grp_fu_342_ce : STD_LOGIC;
    signal grp_fu_346_ce : STD_LOGIC;
    signal grp_fu_350_ce : STD_LOGIC;
    signal grp_fu_354_ce : STD_LOGIC;
    signal grp_fu_358_ce : STD_LOGIC;
    signal grp_fu_362_ce : STD_LOGIC;
    signal grp_fu_366_ce : STD_LOGIC;
    signal grp_fu_370_ce : STD_LOGIC;
    signal grp_fu_384_ce : STD_LOGIC;
    signal grp_fu_388_ce : STD_LOGIC;
    signal grp_fu_392_ce : STD_LOGIC;
    signal grp_fu_396_ce : STD_LOGIC;
    signal grp_fu_400_ce : STD_LOGIC;
    signal grp_fu_414_ce : STD_LOGIC;
    signal grp_fu_428_ce : STD_LOGIC;
    signal grp_fu_432_ce : STD_LOGIC;
    signal grp_fu_436_ce : STD_LOGIC;
    signal grp_fu_440_ce : STD_LOGIC;
    signal grp_fu_454_ce : STD_LOGIC;
    signal grp_fu_458_ce : STD_LOGIC;
    signal grp_fu_462_ce : STD_LOGIC;
    signal grp_fu_466_ce : STD_LOGIC;
    signal grp_fu_470_ce : STD_LOGIC;
    signal grp_fu_503_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component matrixmul_mul_8s_8s_8_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    matrixmul_mul_8s_8s_8_2_U0 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_reg_569,
        din1 => b_load_reg_576,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    matrixmul_mul_8s_8s_8_2_U1 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_1_reg_583,
        din1 => b_load_1_reg_590,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p2);

    matrixmul_mul_8s_8s_8_2_U2 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_2_reg_617,
        din1 => b_load_2_reg_624,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p2);

    matrixmul_mul_8s_8s_8_2_U3 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_reg_569,
        din1 => b_load_3_reg_631,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p2);

    matrixmul_mul_8s_8s_8_2_U4 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_3_reg_638,
        din1 => b_load_reg_576,
        ce => grp_fu_346_ce,
        dout => grp_fu_346_p2);

    matrixmul_mul_8s_8s_8_2_U5 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_3_reg_638,
        din1 => b_load_3_reg_631,
        ce => grp_fu_350_ce,
        dout => grp_fu_350_p2);

    matrixmul_mul_8s_8s_8_2_U6 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_1_reg_583,
        din1 => b_load_4_reg_675,
        ce => grp_fu_354_ce,
        dout => grp_fu_354_p2);

    matrixmul_mul_8s_8s_8_2_U7 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_2_reg_617,
        din1 => b_load_5_reg_682,
        ce => grp_fu_358_ce,
        dout => grp_fu_358_p2);

    matrixmul_mul_8s_8s_8_2_U8 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_4_reg_689,
        din1 => b_load_1_reg_590,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    matrixmul_mul_8s_8s_8_2_U9 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_5_reg_696,
        din1 => b_load_2_reg_624,
        ce => grp_fu_366_ce,
        dout => grp_fu_366_p2);

    matrixmul_mul_8s_8s_8_2_U10 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_4_reg_689,
        din1 => b_load_4_reg_675,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p2);

    matrixmul_mul_8s_8s_8_2_U11 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_reg_569,
        din1 => b_load_6_reg_723,
        ce => grp_fu_384_ce,
        dout => grp_fu_384_p2);

    matrixmul_mul_8s_8s_8_2_U12 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_1_reg_583,
        din1 => b_load_7_reg_730,
        ce => grp_fu_388_ce,
        dout => grp_fu_388_p2);

    matrixmul_mul_8s_8s_8_2_U13 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_5_reg_696,
        din1 => b_load_5_reg_682,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p2);

    matrixmul_mul_8s_8s_8_2_U14 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_3_reg_638,
        din1 => b_load_6_reg_723,
        ce => grp_fu_396_ce,
        dout => grp_fu_396_p2);

    matrixmul_mul_8s_8s_8_2_U15 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_4_reg_689,
        din1 => b_load_7_reg_730,
        ce => grp_fu_400_ce,
        dout => grp_fu_400_p2);

    matrixmul_mul_8s_8s_8_2_U16 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_2_reg_617,
        din1 => b_load_8_reg_771,
        ce => grp_fu_414_ce,
        dout => grp_fu_414_p2);

    matrixmul_mul_8s_8s_8_2_U17 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_5_reg_696,
        din1 => b_load_8_reg_771,
        ce => grp_fu_428_ce,
        dout => grp_fu_428_p2);

    matrixmul_mul_8s_8s_8_2_U18 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_6_reg_747,
        din1 => b_load_reg_576,
        ce => grp_fu_432_ce,
        dout => grp_fu_432_p2);

    matrixmul_mul_8s_8s_8_2_U19 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_7_reg_754,
        din1 => b_load_1_reg_590,
        ce => grp_fu_436_ce,
        dout => grp_fu_436_p2);

    matrixmul_mul_8s_8s_8_2_U20 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_8_reg_793,
        din1 => b_load_2_reg_624,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p2);

    matrixmul_mul_8s_8s_8_2_U21 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_6_reg_747,
        din1 => b_load_3_reg_631,
        ce => grp_fu_454_ce,
        dout => grp_fu_454_p2);

    matrixmul_mul_8s_8s_8_2_U22 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_7_reg_754,
        din1 => b_load_4_reg_675,
        ce => grp_fu_458_ce,
        dout => grp_fu_458_p2);

    matrixmul_mul_8s_8s_8_2_U23 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_8_reg_793,
        din1 => b_load_5_reg_682,
        ce => grp_fu_462_ce,
        dout => grp_fu_462_p2);

    matrixmul_mul_8s_8s_8_2_U24 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_6_reg_747,
        din1 => b_load_6_reg_723,
        ce => grp_fu_466_ce,
        dout => grp_fu_466_p2);

    matrixmul_mul_8s_8s_8_2_U25 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_7_reg_754,
        din1 => b_load_7_reg_730,
        ce => grp_fu_470_ce,
        dout => grp_fu_470_p2);

    matrixmul_mul_8s_8s_8_2_U26 : component matrixmul_mul_8s_8s_8_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_8_reg_793,
        din1 => b_load_8_reg_771,
        ce => grp_fu_503_ce,
        dout => grp_fu_503_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                a_load_1_reg_583 <= a_q1;
                a_load_reg_569 <= a_q0;
                b_load_1_reg_590 <= b_q1;
                b_load_reg_576 <= b_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                a_load_2_reg_617 <= a_q0;
                a_load_3_reg_638 <= a_q1;
                b_load_2_reg_624 <= b_q0;
                b_load_3_reg_631 <= b_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then
                a_load_4_reg_689 <= a_q0;
                a_load_5_reg_696 <= a_q1;
                b_load_4_reg_675 <= b_q0;
                b_load_5_reg_682 <= b_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then
                a_load_6_reg_747 <= a_q0;
                a_load_7_reg_754 <= a_q1;
                b_load_6_reg_723 <= b_q0;
                b_load_7_reg_730 <= b_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                a_load_8_reg_793 <= a_q0;
                b_load_8_reg_771 <= b_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then
                tmp_5_0_0_1_reg_670 <= grp_fu_334_p2;
                tmp_5_2_2_2_reg_880 <= grp_fu_503_p2;
                tmp_5_reg_665 <= grp_fu_330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then
                tmp_5_0_0_2_reg_713 <= grp_fu_338_p2;
                tmp_5_0_1_reg_718 <= grp_fu_342_p2;
                tmp_5_1_1_reg_742 <= grp_fu_350_p2;
                tmp_5_1_reg_737 <= grp_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) then
                tmp_5_0_1_1_reg_761 <= grp_fu_354_p2;
                tmp_5_0_1_2_reg_766 <= grp_fu_358_p2;
                tmp_5_1_0_1_reg_778 <= grp_fu_362_p2;
                tmp_5_1_0_2_reg_783 <= grp_fu_366_p2;
                tmp_5_1_1_1_reg_788 <= grp_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_5_0_2_1_reg_805 <= grp_fu_388_p2;
                tmp_5_0_2_reg_800 <= grp_fu_384_p2;
                tmp_5_1_1_2_reg_810 <= grp_fu_392_p2;
                tmp_5_1_2_1_reg_820 <= grp_fu_400_p2;
                tmp_5_1_2_reg_815 <= grp_fu_396_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then
                tmp_5_0_2_2_reg_825 <= grp_fu_414_p2;
                tmp_5_1_2_2_reg_830 <= grp_fu_428_p2;
                tmp_5_2_0_1_reg_840 <= grp_fu_436_p2;
                tmp_5_2_0_2_reg_845 <= grp_fu_440_p2;
                tmp_5_2_reg_835 <= grp_fu_432_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then
                tmp_5_2_1_1_reg_860 <= grp_fu_458_p2;
                tmp_5_2_1_2_reg_865 <= grp_fu_462_p2;
                tmp_5_2_1_reg_855 <= grp_fu_454_p2;
                tmp_5_2_2_1_reg_875 <= grp_fu_470_p2;
                tmp_5_2_2_reg_870 <= grp_fu_466_p2;
                tmp_6_2_0_2_reg_850 <= tmp_6_2_0_2_fu_498_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
            when ap_ST_pp0_stg4_fsm_4 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg5_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- a_address0 assign process. --
    a_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                a_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                a_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                a_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                a_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                a_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                a_address0 <= "XXXX";
            end if;
        else 
            a_address0 <= "XXXX";
        end if; 
    end process;


    -- a_address1 assign process. --
    a_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                a_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                a_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                a_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                a_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                a_address1 <= "XXXX";
            end if;
        else 
            a_address1 <= "XXXX";
        end if; 
    end process;


    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_ce1 assign process. --
    a_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg5_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_117 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_117)
    begin
        if (ap_sig_bdd_117) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_5_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_address0 assign process. --
    b_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                b_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                b_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                b_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                b_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                b_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                b_address0 <= "XXXX";
            end if;
        else 
            b_address0 <= "XXXX";
        end if; 
    end process;


    -- b_address1 assign process. --
    b_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                b_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                b_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                b_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                b_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            else 
                b_address1 <= "XXXX";
            end if;
        else 
            b_address1 <= "XXXX";
        end if; 
    end process;


    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_ce1 assign process. --
    b_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    biggestValue <= tmp_6_2_2_2_fu_521_p2;

    -- biggestValue_ap_vld assign process. --
    biggestValue_ap_vld_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            biggestValue_ap_vld <= ap_const_logic_1;
        else 
            biggestValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_ce <= ap_const_logic_1;
    grp_fu_334_ce <= ap_const_logic_1;
    grp_fu_338_ce <= ap_const_logic_1;
    grp_fu_342_ce <= ap_const_logic_1;
    grp_fu_346_ce <= ap_const_logic_1;
    grp_fu_350_ce <= ap_const_logic_1;
    grp_fu_354_ce <= ap_const_logic_1;
    grp_fu_358_ce <= ap_const_logic_1;
    grp_fu_362_ce <= ap_const_logic_1;
    grp_fu_366_ce <= ap_const_logic_1;
    grp_fu_370_ce <= ap_const_logic_1;
    grp_fu_384_ce <= ap_const_logic_1;
    grp_fu_388_ce <= ap_const_logic_1;
    grp_fu_392_ce <= ap_const_logic_1;
    grp_fu_396_ce <= ap_const_logic_1;
    grp_fu_400_ce <= ap_const_logic_1;
    grp_fu_414_ce <= ap_const_logic_1;
    grp_fu_428_ce <= ap_const_logic_1;
    grp_fu_432_ce <= ap_const_logic_1;
    grp_fu_436_ce <= ap_const_logic_1;
    grp_fu_440_ce <= ap_const_logic_1;
    grp_fu_454_ce <= ap_const_logic_1;
    grp_fu_458_ce <= ap_const_logic_1;
    grp_fu_462_ce <= ap_const_logic_1;
    grp_fu_466_ce <= ap_const_logic_1;
    grp_fu_470_ce <= ap_const_logic_1;
    grp_fu_503_ce <= ap_const_logic_1;
    lowestValue <= tmp_6_2_2_2_fu_521_p2;

    -- lowestValue_ap_vld assign process. --
    lowestValue_ap_vld_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            lowestValue_ap_vld <= ap_const_logic_1;
        else 
            lowestValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- res_address0 assign process. --
    res_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            res_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    -- res_address1 assign process. --
    res_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                res_address1 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                res_address1 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                res_address1 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                res_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            else 
                res_address1 <= "XXXX";
            end if;
        else 
            res_address1 <= "XXXX";
        end if; 
    end process;


    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_ce1 assign process. --
    res_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_d0 assign process. --
    res_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, tmp_6_0_0_2_fu_378_p2, tmp_6_0_1_2_fu_408_p2, tmp_6_1_1_2_fu_448_p2, tmp_6_1_2_2_fu_488_p2, tmp_6_2_1_2_fu_511_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_d0 <= tmp_6_2_1_2_fu_511_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_d0 <= tmp_6_1_2_2_fu_488_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            res_d0 <= tmp_6_1_1_2_fu_448_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_d0 <= tmp_6_0_1_2_fu_408_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_d0 <= tmp_6_0_0_2_fu_378_p2;
        else 
            res_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- res_d1 assign process. --
    res_d1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, tmp_6_2_0_2_reg_850, tmp_6_2_2_2_fu_521_p2, tmp_6_1_0_2_fu_422_p2, tmp_6_0_2_2_fu_478_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                res_d1 <= tmp_6_2_2_2_fu_521_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                res_d1 <= tmp_6_2_0_2_reg_850;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                res_d1 <= tmp_6_0_2_2_fu_478_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                res_d1 <= tmp_6_1_0_2_fu_422_p2;
            else 
                res_d1 <= "XXXXXXXX";
            end if;
        else 
            res_d1 <= "XXXXXXXX";
        end if; 
    end process;


    -- res_we0 assign process. --
    res_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_we1 assign process. --
    res_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_404_p2 <= std_logic_vector(unsigned(tmp_5_0_1_reg_718) + unsigned(tmp_5_0_1_2_reg_766));
    tmp2_fu_474_p2 <= std_logic_vector(unsigned(tmp_5_0_2_reg_800) + unsigned(tmp_5_0_2_2_reg_825));
    tmp3_fu_418_p2 <= std_logic_vector(unsigned(tmp_5_1_reg_737) + unsigned(tmp_5_1_0_2_reg_783));
    tmp4_fu_444_p2 <= std_logic_vector(unsigned(tmp_5_1_1_reg_742) + unsigned(tmp_5_1_1_2_reg_810));
    tmp5_fu_484_p2 <= std_logic_vector(unsigned(tmp_5_1_2_reg_815) + unsigned(tmp_5_1_2_2_reg_830));
    tmp6_fu_494_p2 <= std_logic_vector(unsigned(tmp_5_2_reg_835) + unsigned(tmp_5_2_0_2_reg_845));
    tmp7_fu_507_p2 <= std_logic_vector(unsigned(tmp_5_2_1_reg_855) + unsigned(tmp_5_2_1_2_reg_865));
    tmp8_fu_517_p2 <= std_logic_vector(unsigned(tmp_5_2_2_reg_870) + unsigned(tmp_5_2_2_2_reg_880));
    tmp_6_0_0_2_fu_378_p2 <= std_logic_vector(unsigned(tmp_fu_374_p2) + unsigned(tmp_5_0_0_1_reg_670));
    tmp_6_0_1_2_fu_408_p2 <= std_logic_vector(unsigned(tmp1_fu_404_p2) + unsigned(tmp_5_0_1_1_reg_761));
    tmp_6_0_2_2_fu_478_p2 <= std_logic_vector(unsigned(tmp2_fu_474_p2) + unsigned(tmp_5_0_2_1_reg_805));
    tmp_6_1_0_2_fu_422_p2 <= std_logic_vector(unsigned(tmp3_fu_418_p2) + unsigned(tmp_5_1_0_1_reg_778));
    tmp_6_1_1_2_fu_448_p2 <= std_logic_vector(unsigned(tmp4_fu_444_p2) + unsigned(tmp_5_1_1_1_reg_788));
    tmp_6_1_2_2_fu_488_p2 <= std_logic_vector(unsigned(tmp5_fu_484_p2) + unsigned(tmp_5_1_2_1_reg_820));
    tmp_6_2_0_2_fu_498_p2 <= std_logic_vector(unsigned(tmp6_fu_494_p2) + unsigned(tmp_5_2_0_1_reg_840));
    tmp_6_2_1_2_fu_511_p2 <= std_logic_vector(unsigned(tmp7_fu_507_p2) + unsigned(tmp_5_2_1_1_reg_860));
    tmp_6_2_2_2_fu_521_p2 <= std_logic_vector(unsigned(tmp8_fu_517_p2) + unsigned(tmp_5_2_2_1_reg_875));
    tmp_fu_374_p2 <= std_logic_vector(unsigned(tmp_5_reg_665) + unsigned(tmp_5_0_0_2_reg_713));
end behav;
